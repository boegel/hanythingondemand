<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
<!--
Determines where on the local filesystem the DFS name node should store the name
table(fsimage). If this is a comma-delimited list of kindoflist then the name
table is replicated in all of the kindoflist, for redundancy. def
$${hadoop.tmp.dir}/dfs/name

<property>
    <name>dfs.name.dir</name>
    <value></value>
</property>
-->

<!--
Determines where on the local filesystem an DFS data node should store its
blocks. If this is a comma-delimited list of kindoflist, then data will be
stored in all named kindoflist, typically on different devices. Directories
that do not exist are ignored. def $${hadoop.tmp.dir}/dfs/data

<property>
    <name>dfs.data.dir </name>
    <value></value>
</property>
-->
<!--
The address where the datanode server will listen to. If the port is 0 then
the server will start on a free port.'], 'dfs.datanode.ipc.address':
[HostnamePort(':50020'), 'The datanode ipc server address and port. If the
port is 0 then the server will start on a free port.
-->
<property>
    <name>dfs.datanode.address</name>
    <value>$hostname:50090</value>
</property>


<!--
ACL for ClientProtocol, which is used by user code via the
DistributedFileSystem.
<property>
    <name>security.client.protocol.acl</name>
    <value> #UserGroup()</value>
</property>
-->

<!--
ACL for ClientDatanodeProtocol, the client - to - datanode protocol for block
recovery.
e.g. UserGroup()

<property>
    <name>security.client.datanode.protocol.acl</name>
    <value></value>
</property>
-->

<!--
ACL for DatanodeProtocol, which is used by datanodes to communicate with the
namenode.
e.g. # UserGroup(),

<property>
    <name>security.datanode.protocol.acl</name>
    <value></value>
</property>
-->

<!--
ACL for InterDatanodeProtocol, the inter - datanode protocol for updating
generation timestamp.
e.g. UserGroup()
<property>
    <name>security.inter.datanode.protocol.acl</name>
    <value></value>
</property>
-->

<!--
ACL for NamenodeProtocol, the protocol used by the secondary namenode to
communicate with the namenode.
e.g. UserGroup()
<property>
    <name>security.namenode.protocol.acl</name>
    <value></value>
</property>
-->

<!--
The address and the base port where the dfs namenode web ui will listen on. If
the port is 0 then the server will start on a free port.
-->
<property>
    <name>dfs.namenode.http-address</name>
    <value>localhost:50070</value>
</property>

<!--
The datanode http server address and port. If the port is 0 then the server
will start on a free port.
-->
<property>
    <name>dfs.datanode.http.address</name>
    <value>localhost:50075</value>
</property>

<!-- Enable durable sync -->
<property>
    <name>dfs.support.append</name>
    <value>true</value>
</property>

<!-- Number of files to served at any one time. -->
<property>
    <name>dfs.datanode.max.xcievers</name>
    <value>4096</value>
</property>

</configuration>
